name: "Prepare for docker build environment"
description: "This action helps to define image name, version, metadata and tag. Also it will try to login to target registry."
inputs:
  registry:
    description: "Docker registry"
    required: true
    default: ""
  registry-user:
    description: "Docker registry user"
    required: false
    default: ""
  registry-password:
    description: "Docker registry passsword"
    required: false
    default: ""
  release:
    description: "Set to true if this is a formal release"
    required: false
    default: ""
  base-directory:
    description: "Base directory where image Dockerfiles are located"
    required: true
    default: ""
  linux-distro:
    description: "Linux distro name. This should be the second level folder name."
    required: false
    default: "ubuntu"
  cpu-arch:
    description: "CPU architecture name. This should be the third level folde rname."
    required: false
    default: "amd64"
  redhat-registry:
    description: "Redhat Docker registry URL"
    required: false
    default: ""
  redhat-registry-user:
    description: "Redhat Docker registry developer user"
    required: false
    default: ""
  redhat-registry-password:
    description: "Redhat Docker registry developer passsword"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Set image name, version and metadata
      run: |
        IMAGE_DIRECTORY=${{ inputs.base-directory }}/${{ inputs.linux-distro }}/${{ inputs.cpu-arch }}
        echo "IMAGE_DIRECTORY=${IMAGE_DIRECTORY}" >> $GITHUB_ENV
        IMAGE_NAME=$(basename ${{ inputs.base-directory }})
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
        IMAGE_VERSION=$(cat ${{ inputs.base-directory }}/${{ inputs.linux-distro }}/${{ inputs.cpu-arch }}/Dockerfile |  awk "/LABEL /{x=NR+100}(NR<=x){print}" | grep version= | head -n 1 |  awk -F= '{print $2;}' | sed -e 's/\\//g' | sed -e 's/"//g' | xargs)
        [ -z "${IMAGE_VERSION}" ] && echo "Cannot determine version of the image" && exit 1
        echo "IMAGE_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV
        IMAGE_METADATA=
        [ -n "${{ github.event.pull_request.number }}" ] && IMAGE_METADATA=pr-${{ github.event.pull_request.number }}
        [ -z "${IMAGE_METADATA}" ] && IMAGE_METADATA=${GITHUB_REF#refs/heads/}
        [ "${IMAGE_METADATA}" = "master" ] && IMAGE_METADATA=snapshot
        IMAGE_METADATA=$(echo "${IMAGE_METADATA}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/\-/g')
        [ "${{ inputs.release }}" = "true" ] && IMAGE_METADATA=
        [ -n "${IMAGE_METADATA}" ] && IMAGE_METADATA=.${IMAGE_METADATA}-${GITHUB_RUN_NUMBER}
        [ -n "${IMAGE_METADATA}" ] && echo "IMAGE_METADATA=${IMAGE_METADATA}" >> $GITHUB_ENV
        IMAGE_TAG=${IMAGE_VERSION}-${{ inputs.linux-distro }}-${{ inputs.cpu-arch }}${IMAGE_METADATA}
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        ${{ inputs.registry }}/ompzowe/${IMAGE_NAME}:${IMAGE_TAG}
        echo "IMAGE_NAME_FULL_LOCAL=ompzowe/${IMAGE_NAME}:${IMAGE_TAG}" >> $GITHUB_ENV
        echo "IMAGE_NAME_FULL_REMOTE=${{ inputs.registry }}/ompzowe/${IMAGE_NAME}:${IMAGE_TAG}" >> $GITHUB_ENV
        exit 0
      shell: bash

    - name: Login to registry
      run: |
        echo "${{ inputs.registry-password }}" | sudo docker login --username "${{ inputs.registry-user }}" --password-stdin ${{ inputs.registry }}
      shell: bash

    - name: Login to Redhat registry
      run: |
        [ -n "${{ inputs.redhat-registry }}" ] && echo "${{ inputs.redhat-registry-password }}" | sudo docker login --username "${{ inputs.redhat-registry-user }}" --password-stdin ${{ inputs.redhat-registry }}
        exit 0
      shell: bash
