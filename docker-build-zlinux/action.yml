name: "Build docker image on local runner"
description: "Build and publish docker image to Zowe docker registry"
inputs:
  release:
    description: "Set to true if this is a formal release"
    required: false
    default: ""
  registry:
    description: "Docker registry"
    required: true
    default: ""
  base-directory:
    description: "Base directory where image Dockerfiles are located"
    required: true
    default: ""
  linux-distro:
    description: "Linux distro name. This should be the second level folder name."
    required: false
    default: "ubuntu"
  cpu-arch:
    description: "CPU architecture name. This should be the third level folde rname."
    required: false
    default: "amd64"
  zlinux-host:
    description: "zLinux host name"
    required: true
    default: ""
  zlinux-ssh-user:
    description: "zLinux SSH user"
    required: true
    default: ""
  zlinux-ssh-key:
    description: "zLinux SSH identify file"
    required: true
    default: ""
  zlinux-ssh-passphrase:
    description: "Passphrase of zLinux SSH identify file"
    required: true
    default: ""
  redhat-registry:
    description: "Redhat Docker registry URL"
    required: false
    default: ""
  redhat-registry-user:
    description: "Redhat Docker registry developer user"
    required: false
    default: ""
  redhat-registry-password:
    description: "Redhat Docker registry developer passsword"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Set image name, version and metadata
      run: |
        IMAGE_VERSION=$(cat ${{ inputs.base-directory }}/${{ inputs.linux-distro }}/${{ inputs.cpu-arch }}/Dockerfile |  awk "/LABEL /{x=NR+100}(NR<=x){print}" | grep version= | head -n 1 |  awk -F= '{print $2;}' | sed -e 's/\\//g' | sed -e 's/"//g' | xargs)
        [ -z "${IMAGE_VERSION}" ] && echo "Cannot determine version of the image" && exit 1
        IMAGE_NAME=$(basename ${{ inputs.base-directory }})
        echo "IMAGE_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
        IMAGE_METADATA=
        [ -n "${{ github.event.pull_request.number }}" ] && IMAGE_METADATA=pr-${{ github.event.pull_request.number }}
        [ -z "${IMAGE_METADATA}" ] && IMAGE_METADATA=${GITHUB_REF#refs/heads/}
        [ "${IMAGE_METADATA}" = "master" ] && IMAGE_METADATA=snapshot
        IMAGE_METADATA=$(echo "${IMAGE_METADATA}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/\-/g')
        [ "${{ inputs.release }}" = "true" ] && IMAGE_METADATA=
        [ -n "${IMAGE_METADATA}" ] && IMAGE_METADATA=.${IMAGE_METADATA}-${GITHUB_RUN_NUMBER}
        [ -n "${IMAGE_METADATA}" ] && echo "IMAGE_METADATA=${IMAGE_METADATA}" >> $GITHUB_ENV
        IMAGE_TAG=${IMAGE_VERSION}-${{ inputs.linux-distro }}-${{ inputs.cpu-arch }}${IMAGE_METADATA}
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        exit 0
      shell: bash

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ inputs.zlinux-ssh-key }}" > ~/.ssh/zlinux.key
        chmod 600 ~/.ssh/zlinux.key
        cat >>~/.ssh/config <<END
        Host zlinux
          HostName ${{ inputs.zlinux-host }}
          User ${{ inputs.zlinux-ssh-user }}
          IdentityFile ~/.ssh/zlinux.key
          StrictHostKeyChecking no
          LogLevel QUIET
        END
      shell: bash

    - name: create remote workspace
      run: |
        BUILD_WORKSPACE=$(sshpass -e -P "passphrase for key" ssh zlinux 'mktemp -d -p /home/${{ inputs.zlinux-ssh-user }} -t build-XXXXXXXX')
        echo "BUILD_WORKSPACE=${BUILD_WORKSPACE}" >> $GITHUB_ENV
      env:
        SSHPASS: ${{ inputs.zlinux-ssh-passphrase }}
      shell: bash

    - name: build image
      run: |
        tar --exclude .git --exclude .tmp --exclude build-workspace.tar.gz -zcf build-workspace.tar.gz *
        sshpass -e -P "passphrase for key" scp build-workspace.tar.gz "zlinux:${{ env.BUILD_WORKSPACE }}"
        rm -f build-workspace.tar.gz
        sshpass -e -P "passphrase for key" ssh zlinux << EOF
        cd "${{ env.BUILD_WORKSPACE }}"
        tar zxf build-workspace.tar.gz
        rm build-workspace.tar.gz
        echo "************ workspace prepared:"
        ls -l
        echo "************ build image"
        cd ${{ inputs.base-directory }}/${{ inputs.linux-distro }}/${{ inputs.cpu-arch }}
        [ -n "${{ inputs.redhat-registry }}" ] && echo "${{ inputs.redhat-registry-password }}" | sudo docker login --username "${{ inputs.redhat-registry-user }}" --password-stdin ${{ inputs.redhat-registry }}
        sudo docker build --no-cache=true -t ompzowe/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
        sudo docker save -o zlinux-image.tar ompzowe/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        sudo chmod 644 zlinux-image.tar
        EOF
        echo "************ download image from zLinux:"
        sshpass -e -P "passphrase for key" scp "zlinux:${{ env.BUILD_WORKSPACE }}/${{ inputs.base-directory }}/${{ inputs.linux-distro }}/${{ inputs.cpu-arch }}/zlinux-image.tar" .
        ls -l zlinux-image.tar
        echo "************ load image:"
        docker load --input zlinux-image.tar
        rm -fr zlinux-image.tar
        echo "************ display images:"
        docker images
        echo "************ publish image:"
        docker tag ompzowe/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.ZOWE_DOCKER_REGISTRY }}/ompzowe/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.ZOWE_DOCKER_REGISTRY }}/ompzowe/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      env:
        SSHPASS: ${{ inputs.zlinux-ssh-passphrase }}
      shell: bash

    - name: publish image
      working-directory: ${{ inputs.base-directory }}/${{ inputs.linux-distro }}/${{ inputs.cpu-arch }}
      run: |
        docker push ${{ inputs.registry }}/ompzowe/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      shell: bash

    # FIXME: if: ${{ always() }}?
    - name: clean up remote workspace
      run: |
        sshpass -e -P "passphrase for key" ssh zlinux '[ -n "${{ env.BUILD_WORKSPACE }}" ] && rm -fr ${{ env.BUILD_WORKSPACE }}'
      env:
        SSHPASS: ${{ inputs.zlinux-ssh-passphrase }}
      shell: bash
